{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  BluetoothState,\n  NrfMeshPlugin,\n  Permissions,\n  MeshNetwork,\n  MeshNetworkExport,\n  MeshAppKey,\n  ProvisioningCapabilities,\n  ProvisioningStatus,\n  ScanMeshDevices,\n  NodeResetStatus,\n  CompositionDataStatus,\n  DefaultTTLStatus,\n  NetworkTransmitStatus,\n  AppKeyStatus,\n  AppKeyListStatus,\n  ModelAppStatus,\n} from './definitions';\n\nexport class NrfMeshWeb extends WebPlugin implements NrfMeshPlugin {\n  async checkPermissions (): Promise<Permissions> {\n    console.log('checkPermissions');\n    return { LOCATION: 'granted', BLUETOOTH: 'granted' };\n  }\n  async requestPermissions (): Promise<any> {\n    console.log('requestPermissions');\n    return;\n  }\n  async isBluetoothEnabled (): Promise<BluetoothState> {\n    console.log('isBluetoothEnabled');\n    return { enabled: true };\n  }\n  async requestBluetoothEnable (): Promise<BluetoothState> {\n    console.log('requestBluetoothEnabled');\n    return { enabled: true };\n  }\n\n  async initMeshNetwork (): Promise<void> {\n    console.log('initMeshNetwork');\n  }\n  async getMeshNetwork (): Promise<MeshNetwork> {\n    console.log('getMeshNetwork');\n    return {} as MeshNetwork;\n  }\n  async exportMeshNetwork (): Promise<MeshNetworkExport> {\n    console.log('exportMeshNetwork');\n    return {} as MeshNetworkExport;\n  }\n  async importMeshNetwork (): Promise<void> {\n    console.log('importMeshNetwork');\n  }\n  async createApplicationKey (): Promise<MeshAppKey> {\n    console.log('createApplicationKey');\n    return {} as MeshAppKey;\n  }\n  async removeApplicationKey (): Promise<void> {\n    console.log('removeApplicationKey');\n  }\n\n  async scanMeshDevices (): Promise<ScanMeshDevices> {\n    console.log('scanMeshDevices');\n    return { unprovisioned: [], provisioned: [], proxy: [] };\n  }\n  async getProvisioningCapabilities (): Promise<ProvisioningCapabilities> {\n    console.log('getProvisioningCapabilities');\n    return {} as ProvisioningCapabilities;\n  }\n  async provisionDevice (): Promise<ProvisioningStatus> {\n    console.log('provisionDevice');\n    return { provisioningComplete: true, uuid: '1234' };\n  }\n  async unprovisionDevice (): Promise<NodeResetStatus> {\n    console.log('unprovisionDevice');\n    return {} as NodeResetStatus;\n  }\n\n  async getCompositionData (): Promise<CompositionDataStatus> {\n    console.log('getCompositionData');\n    return {} as CompositionDataStatus;\n  }\n  async getDefaultTTL (): Promise<DefaultTTLStatus> {\n    console.log('getDefaultTTL');\n    return {} as DefaultTTLStatus;\n  }\n  async setDefaultTTL (): Promise<DefaultTTLStatus> {\n    console.log('setDefaultTTL');\n    return {} as DefaultTTLStatus;\n  }\n  async getNetworkTransmit (): Promise<NetworkTransmitStatus> {\n    console.log('getNetworkTransmit');\n    return {} as NetworkTransmitStatus;\n  }\n  async setNetworkTransmit (): Promise<NetworkTransmitStatus> {\n    console.log('setNetworkTransmit');\n    return {} as NetworkTransmitStatus;\n  }\n  async addAppKey (): Promise<AppKeyStatus> {\n    console.log('addAppKey');\n    return {} as AppKeyStatus;\n  }\n  async deleteAppKey (): Promise<AppKeyStatus> {\n    console.log('deleteAppKey');\n    return {} as AppKeyStatus;\n  }\n  async getAppKeys (): Promise<AppKeyListStatus> {\n    console.log('getAppKeys');\n    return {} as AppKeyListStatus;\n  }\n  async bindAppKey (): Promise<ModelAppStatus> {\n    console.log('bindAppKey');\n    return {} as ModelAppStatus;\n  }\n  async unbindAppKey (): Promise<ModelAppStatus> {\n    console.log('unbindAppKey');\n    return {} as ModelAppStatus;\n  }\n\n  // async createApplicationKey(): Promise<void> {\n  //   console.log('createApplicationKey');\n  // }\n  // async removeApplicationKey(): Promise<void> {\n  //   console.log('removeApplicationKey');\n  // }\n  // async addApplicationKeyToNode(): Promise<AddAppKeyStatus> {\n  //   console.log('addApplicationKeyToNode');\n  //   return { success: true };\n  // }\n  // async bindApplicationKeyToModel(): Promise<void> {\n  //   console.log('bindApplicationKeyToModel');\n  // }\n  // async sendGenericOnOffSet(): Promise<ModelMessageStatus | PluginCallRejection> {\n  //   console.log('sendGenericOnOffSet');\n  //   return { src: 1, dst: 2, opcode: 3, data: {} };\n  // }\n  // async sendGenericOnOffGet(): Promise<ModelMessageStatus | PluginCallRejection> {\n  //   console.log('sendGenericOnOffSet');\n  //   return { src: 1, dst: 2, opcode: 3, data: {} };\n  // }\n  // async sendGenericPowerLevelSet(): Promise<ModelMessageStatus | PluginCallRejection> {\n  //   console.log('sendGenericPowerLevelSet');\n  //   return { src: 1, dst: 2, opcode: 3, data: {} };\n  // }\n  // async sendGenericPowerLevelGet(): Promise<ModelMessageStatus | PluginCallRejection> {\n  //   console.log('sendGenericPowerLevelGet');\n  //   return { src: 1, dst: 2, opcode: 3, data: {} };\n  // }\n  // async sendLightHslSet(): Promise<ModelMessageStatus | PluginCallRejection> {\n  //   console.log('sendLightHslSet');\n  //   return { src: 1, dst: 2, opcode: 3, data: {} };\n  // }\n  // async sendLightHslGet(): Promise<ModelMessageStatus | PluginCallRejection> {\n  //   console.log('sendLightHslGet');\n  //   return { src: 1, dst: 2, opcode: 3, data: {} };\n  // }\n  // initMeshNetwork(): Promise<MeshNetworkObject> {\n  //   return Promise.resolve({ meshNetwork: 'meshNetwork' });\n  // }\n  // async exportMeshNetwork(): Promise<MeshNetworkObject> {\n  //   console.log('exportMeshNetwork');\n  //   return { meshNetwork: 'meshNetwork' };\n  // }\n  // async importMeshNetwork(): Promise<void> {\n  //   console.log('importMeshNetwork');\n  // }\n  // async sendVendorModelMessage(options: {\n  //   unicastAddress: number;\n  //   appKeyIndex: number;\n  //   modelId: number;\n  //   companyIdentifier: number;\n  //   opcode: number;\n  //   payload: Uint8Array;\n  // }): Promise<ModelMessageStatus | PluginCallRejection> {\n  //   console.log('sendVendorModelMessage', options);\n  //   return { src: 1, dst: 2, opcode: 3, data: {} };\n  // }\n  // sendLightCtlSet(): Promise<ModelMessageStatus | PluginCallRejection> {\n  //   throw new Error('Method not implemented.');\n  // }\n}\n"]}