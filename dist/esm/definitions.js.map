{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface BluetoothState {\n  enabled: boolean;\n}\n\nexport interface Permissions {\n  [key: string]: string;\n}\n\nexport interface MeshAppKey {\n  name: string;\n  index: number;\n  key: string;\n  oldKey?: string;\n  boundNetKeyIndex: number;\n}\n\nexport interface MeshNetKey {\n  name: string;\n  key: string;\n  oldKey?: string;\n  index: number;\n  phase: number;\n  security: 'secure' | 'insecure';\n  lastModified: string;\n}\n\nexport interface MeshProvisioner {\n  name: string;\n  ttl: number;\n  unicastAddress?: number;\n  unicast: [\n    {\n      lowerAddress: number;\n      highAddress: number;\n      lowerBound: number;\n      upperBound: number;\n    },\n  ];\n  group: [\n    {\n      lowerAddress: number;\n      highAddress: number;\n      lowerBound: number;\n      upperBound: number;\n    },\n  ];\n  scene: [\n    {\n      firstScene: number;\n      lastScene: number;\n      lowerBound: number;\n      upperBound: number;\n    },\n  ];\n}\n\nexport interface MeshNode {\n  name: string;\n  deviceKey: string;\n  unicastAddress: number;\n  security: string;\n  ttl: number;\n  excluded: boolean;\n  features: {\n    friend: number;\n    lowPower: number;\n    proxy: number;\n    relay: number;\n  };\n  netKeys: Array<{\n    index: number;\n    updated: boolean;\n  }>;\n  appKeys: Array<{\n    index: number;\n    updated: boolean;\n  }>;\n  elements: Array<{\n    name: string;\n    elementAddress: number;\n    location: number;\n    models: Array<{\n      modelId: number;\n      bind: Array<number>;\n      subscribe: Array<number>;\n    }>;\n  }>;\n\n  networkTransmit?: {\n    count: number;\n    interval: number;\n    steps: number;\n  };\n\n  cid?: string;\n  pid?: string;\n  vid?: string;\n  crpl?: string;\n}\n\nexport interface MeshNetwork {\n  name: string;\n  lastModified: string;\n  provisioners: Array<MeshProvisioner>;\n  netKeys: Array<MeshNetKey>;\n  appKeys: Array<MeshAppKey>;\n  nodes: Array<MeshNode>;\n  networkExclusions: Array<{\n    ivIndex: number;\n    addresses: Array<number>;\n  }>;\n}\n\nexport interface MeshNetworkExport {\n  meshNetwork: string;\n}\n\nexport interface UnprovisionedDevice {\n  uuid: string;\n  name: string;\n  rssi: number;\n  macAddress: string;\n}\n\nexport interface ProxyDevice {\n  name: string;\n  rssi: number;\n  macAddress: string;\n}\n\nexport interface ProvisionedDevice {\n  name: string;\n  provisionedTime: string;\n  unicastAddress: number;\n  security: boolean;\n  deviceKey: string;\n  companyIdentifier?: string;\n  productIdentifier?: string;\n  productVersion?: string;\n  replayProtectionCount?: string;\n  nodeFeaturesSupported?: {\n    relay: boolean;\n    proxy: boolean;\n    friend: boolean;\n    lowPower: boolean;\n  };\n  nodeFeatures?: {\n    relay: boolean;\n    proxy: boolean;\n    friend: boolean;\n    lowPower: boolean;\n  };\n}\n\nexport interface ScanMeshDevices {\n  unprovisioned: Array<UnprovisionedDevice>;\n  provisioned: Array<ProvisionedDevice>;\n  proxy: Array<ProxyDevice>;\n}\n\nexport interface ProvisioningCapabilities {\n  numberOfElements: number;\n  availableOOBTypes: Array<string>;\n  algorithms: number;\n  publicKeyType: number;\n  staticOobTypes: number;\n  outputOobSize: number;\n  outputOobActions: number;\n  inputOobSize: number;\n  inputOobActions: number;\n}\n\nexport interface ProvisioningStatus {\n  provisioningComplete: boolean;\n  uuid: string;\n  unicastAddress?: number;\n}\n\nexport interface Status {\n  src: number;\n  dst: number;\n  opcode: number;\n}\n\nexport interface NodeResetStatus extends Status {\n  data: {\n    status: number;\n    statusName: string;\n  };\n}\n\nexport interface CompositionDataStatus extends Status {\n  data: {\n    status: number;\n    statusName: string;\n    companyIdentifier: string;\n    productIdentifier: string;\n    productVersion: string;\n    nodeFeaturesSupported: {\n      relay: boolean;\n      proxy: boolean;\n      friend: boolean;\n      lowPower: boolean;\n    };\n    elements: Array<{\n      name: string;\n      elementAddress: number;\n      sigModelCount: number;\n      vendorModelCount: number;\n      location: number;\n      models: [\n        {\n          modelId: number;\n          modelName: string;\n          boundAppKeyIndexes: Array<number>;\n        },\n      ];\n    }>;\n  };\n}\n\nexport interface DefaultTTLStatus extends Status {\n  data: {\n    status: number;\n    statusName: string;\n    ttl: number;\n  };\n}\n\nexport interface NetworkTransmitStatus extends Status {\n  data: {\n    status: number;\n    statusName: string;\n    networkTransmitCount: number;\n    networkTransmitIntervalSteps: number;\n  };\n}\n\nexport interface AppKeyStatus extends Status {\n  data: {\n    status: number;\n    statusName: string;\n    netKeyIndex: number;\n    appKeyIndex: number;\n  };\n}\n\nexport interface AppKeyListStatus extends Status {\n  data: {\n    status: number;\n    statusName: string;\n    netKeyIndex: number;\n    appKeyIndexes: Array<number>;\n  };\n}\n\nexport interface ModelAppStatus extends Status {\n  data: {\n    status: number;\n    statusName: string;\n    elementAddress: number;\n    modelId: number;\n    appKeyIndex: number;\n  };\n}\n\nexport interface NrfMeshPlugin {\n  checkPermissions(): Promise<Permissions>;\n  requestPermissions(): Promise<Permissions>;\n  isBluetoothEnabled(): Promise<BluetoothState>;\n  requestBluetoothEnable(): Promise<BluetoothState>;\n  initMeshNetwork(): Promise<void>;\n  exportMeshNetwork(): Promise<MeshNetworkExport>;\n  importMeshNetwork(network: MeshNetworkExport): Promise<void>;\n\n  // getProvisioners(): Promise<Array<MeshProvisioner>>;\n  getMeshNetwork(): Promise<MeshNetwork>;\n  createApplicationKey(): Promise<MeshAppKey>;\n  removeApplicationKey(options: { index: number }): Promise<void>;\n\n  scanMeshDevices(options: { timeout: number }): Promise<ScanMeshDevices>;\n  getProvisioningCapabilities(options: {\n    macAddress: string;\n    uuid: string;\n  }): Promise<ProvisioningCapabilities>;\n  provisionDevice(options: {\n    macAddress: string;\n    uuid: string;\n  }): Promise<ProvisioningStatus>;\n  unprovisionDevice(options: {\n    unicastAddress: number;\n  }): Promise<NodeResetStatus>;\n\n  getCompositionData(options: {\n    unicastAddress: number;\n  }): Promise<CompositionDataStatus>;\n  getDefaultTTL(options: { unicastAddress: number }): Promise<DefaultTTLStatus>;\n  setDefaultTTL(options: {\n    unicastAddress: number;\n    ttl: number;\n  }): Promise<DefaultTTLStatus>;\n  getNetworkTransmit(options: {\n    unicastAddress: number;\n  }): Promise<NetworkTransmitStatus>;\n  setNetworkTransmit(options: {\n    unicastAddress: number;\n    networkTransmitCount: number;\n    networkTransmitIntervalSteps: number;\n  }): Promise<NetworkTransmitStatus>;\n  addAppKey(options: {\n    unicastAddress: number;\n    appKeyIndex: number;\n  }): Promise<AppKeyStatus>;\n  deleteAppKey(options: {\n    unicastAddress: number;\n    appKeyIndex: number;\n  }): Promise<AppKeyStatus>;\n  getAppKeys(options: { unicastAddress: number }): Promise<AppKeyListStatus>;\n  bindAppKey(options: {\n    unicastAddress: number;\n    elementAddress: number;\n    modelId: number;\n    appKeyIndex: number;\n  }): Promise<ModelAppStatus>;\n  unbindAppKey(options: {\n    unicastAddress: number;\n    elementAddress: number;\n    modelId: number;\n    appKeyIndex: number;\n  }): Promise<ModelAppStatus>;\n\n  // sendGenericOnOffSet(options: {\n  //   unicastAddress: number;\n  //   appKeyIndex: number;\n  //   onOff: boolean;\n  //   acknowledgement?: boolean;\n  // }): Promise<ModelMessageStatus | PluginCallRejection>;\n  // sendGenericOnOffGet(options: {\n  //   unicastAddress: number;\n  //   appKeyIndex: number;\n  // }): Promise<ModelMessageStatus | PluginCallRejection>;\n  // sendGenericPowerLevelSet(options: {\n  //   unicastAddress: number;\n  //   appKeyIndex: number;\n  //   powerLevel: number;\n  // }): Promise<ModelMessageStatus | PluginCallRejection>;\n  // sendGenericPowerLevelGet(options: {\n  //   unicastAddress: number;\n  //   appKeyIndex: number;\n  // }): Promise<ModelMessageStatus | PluginCallRejection>;\n  // sendLightHslSet(options: {\n  //   unicastAddress: number;\n  //   appKeyIndex: number;\n  //   hue: number;\n  //   saturation: number;\n  //   lightness: number;\n  // }): Promise<ModelMessageStatus | PluginCallRejection>;\n  // sendLightHslGet(options: {\n  //   unicastAddress: number;\n  //   appKeyIndex: number;\n  // }): Promise<ModelMessageStatus | PluginCallRejection>;\n  // sendLightCtlSet(options: {\n  //   unicastAddress: number;\n  //   appKeyIndex: number;\n  //   lightness: number;\n  //   temperature: number;\n  //   deltaUv: number;\n  // }): Promise<ModelMessageStatus | PluginCallRejection>;\n  // sendVendorModelMessage(options: {\n  //   unicastAddress: number;\n  //   appKeyIndex: number;\n  //   modelId: number;\n  //   opcode: number;\n  //   payload?: Uint8Array;\n  //   opPairCode?: number;\n  // }): Promise<ModelMessageStatus | PluginCallRejection>;\n  // exportMeshNetwork(): Promise<MeshNetworkObject>;\n  // importMeshNetwork(options: { meshNetwork: string }): Promise<void>;\n  addListener(\n    eventName: string,\n    listenerFunc: (event: any) => void,\n  ): Promise<PluginListenerHandle>;\n  removeAllListeners(): Promise<void>;\n}\n"]}